{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nexport const useAuth = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    login: setAuthUser,\n    logout: setAuthUserLogout\n  } = useContext(AuthContext);\n  if (!setAuthUser || !setAuthUserLogout) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  const login = async ({\n    username,\n    password\n  }) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        alert(errorData.message || \"Login failed\");\n        return false;\n      }\n      const data = await response.json();\n      setAuthUser(data.user); // assume backend returns { user: {username, ...} }\n      alert(\"Login successful\");\n      navigate(\"/home\");\n      return true;\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred during login\");\n      return false;\n    }\n  };\n  const logout = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        alert(errorData.message || \"Logout failed\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred during logout\");\n    }\n    setAuthUserLogout(); // call logout function from context (which clears user)\n    navigate(\"/\");\n  };\n  return {\n    login,\n    logout\n  };\n};\n_s(useAuth, \"fwXptJVSsZ2DHiOQbruPSjbLS98=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useContext","useNavigate","AuthContext","useAuth","_s","navigate","login","setAuthUser","logout","setAuthUserLogout","Error","username","password","response","fetch","method","headers","credentials","body","JSON","stringify","ok","errorData","json","alert","message","data","user","error","console"],"sources":["D:/Projects/react-simple-auth/client/src/hooks/useAuth.js"],"sourcesContent":["import { useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nexport const useAuth = () => {\r\n  const navigate = useNavigate();\r\n  const { login: setAuthUser, logout: setAuthUserLogout } =\r\n    useContext(AuthContext);\r\n\r\n  if (!setAuthUser || !setAuthUserLogout) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n\r\n  const login = async ({ username, password }) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/auth/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        alert(errorData.message || \"Login failed\");\r\n        return false;\r\n      }\r\n\r\n      const data = await response.json();\r\n      setAuthUser(data.user); // assume backend returns { user: {username, ...} }\r\n      alert(\"Login successful\");\r\n      navigate(\"/home\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"An error occurred during login\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/auth/logout\", {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        alert(errorData.message || \"Logout failed\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"An error occurred during logout\");\r\n    }\r\n\r\n    setAuthUserLogout(); // call logout function from context (which clears user)\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return { login, logout };\r\n};\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEK,KAAK,EAAEC,WAAW;IAAEC,MAAM,EAAEC;EAAkB,CAAC,GACrDT,UAAU,CAACE,WAAW,CAAC;EAEzB,IAAI,CAACK,WAAW,IAAI,CAACE,iBAAiB,EAAE;IACtC,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,MAAMJ,KAAK,GAAG,MAAAA,CAAO;IAAEK,QAAQ;IAAEC;EAAS,CAAC,KAAK;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,WAAW,EAAE,SAAS;QACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvCC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,cAAc,CAAC;QAC1C,OAAO,KAAK;MACd;MAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClChB,WAAW,CAACmB,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;MACxBH,KAAK,CAAC,kBAAkB,CAAC;MACzBnB,QAAQ,CAAC,OAAO,CAAC;MACjB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOuB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBJ,KAAK,CAAC,gCAAgC,CAAC;MACvC,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMhB,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdE,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvCC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,eAAe,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpBJ,KAAK,CAAC,iCAAiC,CAAC;IAC1C;IAEAf,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACrBJ,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,OAAO;IAAEC,KAAK;IAAEE;EAAO,CAAC;AAC1B,CAAC;AAACJ,EAAA,CAzDWD,OAAO;EAAA,QACDF,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}